{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","harsh.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","harsh","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_toConsumableArray","arr","Array","isArray","arr2","from","_typeof","Symbol","iterator","obj","constructor","createSalts","base","salts","push","Math","floor","random","pow","toString","createHash","id","hash","pieces","concat","hashString","index","splice","_base","_ids","_n","_num","ids","_ret","TypeError","hashes","map","v","console","error","name","message","bunch","num","_ret2","reverse","_ret3","re","RegExp","join","reversed","stripped","replace","parseInt"],"mappings":"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","file":"harsh.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nconst createSalts = (n, base) => {\n  let salts = []\n  for (let i = 0; i < n; i++) {\n    salts.push(Math.floor(Math.random() * Math.pow(10, 6)).toString(base))\n  }\n  return salts\n}\n\nconst createHash = (id, salts, base) => {\n  const hash = id.toString(base)\n  let pieces = [...salts, hash]\n  let hashString = ''\n  do {\n    let index = Math.floor(Math.random() * pieces.length)\n    hashString += pieces[index]\n    pieces.splice(index, 1)\n  } while (pieces.length)\n  return hashString\n}\n\nconst harsh = {\n  _base: 36,\n  _ids: [Math.floor(Math.random() * 100)],\n  _n: 2,\n  _num: 1,\n  /**\n   * Takes a number and a radix base, outputs a salted hash\n   * @param  {Array} ids   list of ids to hash\n   * @param {Number} n number of salts to add to the hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */\n  hash (ids, n, base) {\n    ids = ids || this._ids\n    n = n || this._n\n    base = base || this._base\n    try {\n      if (!ids.splice) {\n        throw new TypeError('The ids argument should be an array of numbers')\n      }\n      if (typeof n !== 'number' || n < 0) {\n        throw new TypeError('The number of salts should be a positive integer')\n      }\n      if (typeof base !== 'number' || base < 16 || base > 36) {\n        throw new TypeError('The base should be a number between 16 and 36')\n      }\n\n      // Create the salts. This will be the same for all hashes\n      const salts = createSalts(n, base)\n\n      // Combine the salts and the actual\n      let hashes = ids.map((id) => {\n        if (typeof id !== 'number') {\n          throw new TypeError('The ids you\\'re hashing should only be numbers')\n        }\n        return createHash(id, salts, base)\n      })\n\n      return {\n        ids: ids,\n        hashes: hashes,\n        salts: salts,\n        base: base\n      }\n    } catch (e) {\n      console.error(e.name, e.message)\n    }\n  },\n  /**\n   * Creates a specified number of random tokens\n   * @param  {Number} num  number of tokens to create\n   * @param  {Number} n    number of salts to add to each hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */\n  bunch (num, n, base) {\n    num = num || this._num\n    n = n || this._n\n    base = base || this._base\n    try {\n      if (typeof num !== 'number') {\n        throw new TypeError('The num should be a number')\n      }\n      if (typeof n !== 'number' || n < 0) {\n        throw new TypeError('The number of salts should be a positive integer')\n      }\n      if (typeof base !== 'number' || base < 16 || base > 36) {\n        throw new TypeError('The base should be a number between 16 and 36')\n      }\n\n      // Create the ids\n      let ids = []\n      for (let i = 0; i < num; i++) {\n        ids.push(Math.floor(Math.random() * Math.pow(10, num.toString(10).length + 2)))\n      }\n\n      // Create the salts. This will be the same for all hashes\n      const salts = createSalts(n, base)\n\n      // Combine the salts and the actual\n      let hashes = ids.map((id) => {\n        return createHash(id, salts, base)\n      })\n\n      return {\n        ids: ids,\n        hashes: hashes,\n        salts: salts,\n        base: base\n      }\n    } catch (e) {\n      console.error(e.name, e.message)\n    }\n  },\n  /**\n   * Takes a string and necessary components to reverse back to the original number\n   * @param  {Array} hashes   list of hashes to reverse\n   * @param  {Array} salts  list of salts applied to the list (provided from `hash`)\n   * @param  {base} base     radix base, 16 through 36 allowed\n   * @return {Array}          list of reversed hashes\n   */\n  reverse (hashes, salts, base) {\n    base = base || this._base\n    try {\n      if (!hashes.splice) {\n        throw new TypeError('The hashes argument should be an array of hashes provided by the hash method')\n      }\n      if (!salts.splice) {\n        throw new TypeError('The salts argument should be an array of salt strings provided by the hash method')\n      }\n      if (typeof base !== 'number' || base < 16 || base > 36) {\n        throw new TypeError('The base should be a number between 16 and 36')\n      }\n      const re = new RegExp(salts.join('\\|'), 'g')\n\n      let reversed = hashes.map((hash) => {\n        if (typeof hash !== 'string') {\n          throw new TypeError('The hashes you\\'re reversing should only be strings')\n        }\n        let stripped = hash.replace(re, '')\n        return parseInt(stripped, base)\n      })\n      return reversed\n    } catch (e) {\n      console.error(e.name, e.message)\n    }\n  }\n}\n\nmodule.exports = harsh\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.harsh = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol?\"symbol\":typeof obj;};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else {return Array.from(arr);}}var createSalts=function createSalts(n,base){var salts=[];for(var i=0;i<n;i++){salts.push(Math.floor(Math.random()*Math.pow(10,6)).toString(base));}return salts;};var createHash=function createHash(id,salts,base){var hash=id.toString(base);var pieces=[].concat(_toConsumableArray(salts),[hash]);var hashString='';do {var index=Math.floor(Math.random()*pieces.length);hashString+=pieces[index];pieces.splice(index,1);}while(pieces.length);return hashString;};var harsh={_base:36,_ids:[Math.floor(Math.random()*100)],_n:2,_num:1, /**\n   * Takes a number and a radix base, outputs a salted hash\n   * @param  {Array} ids   list of ids to hash\n   * @param {Number} n number of salts to add to the hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */hash:function hash(ids,n,base){ids=ids||this._ids;n=n||this._n;base=base||this._base;try{var _ret=function(){if(!ids.splice){throw new TypeError('The ids argument should be an array of numbers');}if(typeof n!=='number'||n<0){throw new TypeError('The number of salts should be a positive integer');}if(typeof base!=='number'||base<16||base>36){throw new TypeError('The base should be a number between 16 and 36');} // Create the salts. This will be the same for all hashes\nvar salts=createSalts(n,base); // Combine the salts and the actual\nvar hashes=ids.map(function(id){if(typeof id!=='number'){throw new TypeError('The ids you\\'re hashing should only be numbers');}return createHash(id,salts,base);});return {v:{ids:ids,hashes:hashes,salts:salts,base:base}};}();if((typeof _ret==='undefined'?'undefined':_typeof(_ret))===\"object\")return _ret.v;}catch(e){console.error(e.name,e.message);}}, /**\n   * Creates a specified number of random tokens\n   * @param  {Number} num  number of tokens to create\n   * @param  {Number} n    number of salts to add to each hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */bunch:function bunch(num,n,base){num=num||this._num;n=n||this._n;base=base||this._base;try{var _ret2=function(){if(typeof num!=='number'){throw new TypeError('The num should be a number');}if(typeof n!=='number'||n<0){throw new TypeError('The number of salts should be a positive integer');}if(typeof base!=='number'||base<16||base>36){throw new TypeError('The base should be a number between 16 and 36');} // Create the ids\nvar ids=[];for(var i=0;i<num;i++){ids.push(Math.floor(Math.random()*Math.pow(10,num.toString(10).length+2)));} // Create the salts. This will be the same for all hashes\nvar salts=createSalts(n,base); // Combine the salts and the actual\nvar hashes=ids.map(function(id){return createHash(id,salts,base);});return {v:{ids:ids,hashes:hashes,salts:salts,base:base}};}();if((typeof _ret2==='undefined'?'undefined':_typeof(_ret2))===\"object\")return _ret2.v;}catch(e){console.error(e.name,e.message);}}, /**\n   * Takes a string and necessary components to reverse back to the original number\n   * @param  {Array} hashes   list of hashes to reverse\n   * @param  {Array} salts  list of salts applied to the list (provided from `hash`)\n   * @param  {base} base     radix base, 16 through 36 allowed\n   * @return {Array}          list of reversed hashes\n   */reverse:function reverse(hashes,salts,base){base=base||this._base;try{var _ret3=function(){if(!hashes.splice){throw new TypeError('The hashes argument should be an array of hashes provided by the hash method');}if(!salts.splice){throw new TypeError('The salts argument should be an array of salt strings provided by the hash method');}if(typeof base!=='number'||base<16||base>36){throw new TypeError('The base should be a number between 16 and 36');}var re=new RegExp(salts.join('\\|'),'g');var reversed=hashes.map(function(hash){if(typeof hash!=='string'){throw new TypeError('The hashes you\\'re reversing should only be strings');}var stripped=hash.replace(re,'');return parseInt(stripped,base);});return {v:reversed};}();if((typeof _ret3==='undefined'?'undefined':_typeof(_ret3))===\"object\")return _ret3.v;}catch(e){console.error(e.name,e.message);}}};module.exports=harsh;\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}