{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","harsh.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","harsh","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_typeof","Symbol","iterator","obj","constructor","_base","_id","Math","floor","random","_n","hash","ids","arguments","undefined","base","_ret","splice","TypeError","salts","push","pow","toString","hashes","map","id","pieces","concat","hashString","index","v","console","error","name","message","revarse","_ret2","re","RegExp","join","reversed","stripped","replace","parseInt"],"mappings":"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","file":"harsh.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nconst harsh = {\n  _base: 36,\n  _id: Math.floor(Math.random() * 100),\n  _n: 2,\n  /**\n   * Takes a number and a radix base, outputs a salted hash\n   * @param  {Array} ids   list of ids to hash   \n   * @param {Number} n number of salts to add to the hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */\n  hash (ids = [this._id], n = this._n, base = this._base) {\n    try {\n      if (!ids.splice) {\n        throw new TypeError('The ids argument should be an array of numbers')\n      }\n      if (typeof n !== 'number' || n < 0) {\n        throw new TypeError('The number of salts should be a positive integer')\n      }\n      if (typeof base !== 'number' || base < 16 || base > 36) {\n        throw new TypeError('The base should be a number between 16 and 36')\n      }\n      \n      // Create the salts. This will be the same for all hashes\n      let salts = []\n      for (let i = 0; i < n; i++) {\n        salts.push(Math.floor(Math.random() * Math.pow(10, 6)).toString(base))\n      }\n\n      // Combine the salts and the actual \n      let hashes = ids.map((id) => {\n        if (typeof id !== 'number') {\n          throw new TypeError('The ids you\\'re hashing should only be numbers')\n        }\n        const hash = id.toString(base)\n        let pieces = [...salts, hash]\n        let hashString = ''\n        do {\n          let index = Math.floor(Math.random() * pieces.length)\n          hashString += pieces[index]\n          pieces.splice(index, 1)\n        } while (pieces.length)\n        return hashString\n      })\n\n      return {\n        ids: ids,\n        hashes: hashes,\n        salts: salts,\n        base: base\n      } \n    } catch (e) {\n      console.error(e.name, e.message)\n    }\n  },\n  /**\n   * Takes a string and necessary components to reverse back to the original number\n   * @param  {Array} hashes   list of hashes to reverse\n   * @param  {Array} salts  list of salts applied to the list (provided from `hash`)\n   * @param  {base} base     radix base, 16 through 36 allowed\n   * @return {Array}          list of reversed hashes\n   */\n  revarse (hashes, salts, base = this._base) {\n    try {\n      if (!hashes.splice) {\n        throw new TypeError('The hashes argument should be an array of hashes provided by the hash method')\n      }\n      if (!hashes.splice) {\n        throw new TypeError('The salts argument should be an array of salt strings provided by the hash method')\n      }\n      if (typeof base !== 'number' || base < 16 || base > 36) {\n        throw new TypeError('The base should be a number between 16 and 36')\n      }\n      const re = new RegExp(salts.join('\\|'), 'g')\n      \n      let reversed = hashes.map((hash) => {\n        if (typeof hash !== 'string') {\n          throw new TypeError('The hashes you\\'re reversing should only be strings')\n        }\n        let stripped = hash.replace(re, '')\n        return parseInt(stripped, base)\n      })\n      return reversed\n    } catch (e) {\n      console.error(e.name, e.message)\n    }\n  }\n}\n\nmodule.exports = harsh","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.harsh = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol?\"symbol\":typeof obj;};var harsh={_base:36,_id:Math.floor(Math.random()*100),_n:2, /**\n   * Takes a number and a radix base, outputs a salted hash\n   * @param  {Array} ids   list of ids to hash   \n   * @param {Number} n number of salts to add to the hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */hash:function hash(){var ids=arguments.length<=0||arguments[0]===undefined?[this._id]:arguments[0];var n=arguments.length<=1||arguments[1]===undefined?this._n:arguments[1];var base=arguments.length<=2||arguments[2]===undefined?this._base:arguments[2];try{var _ret=function(){if(!ids.splice){throw new TypeError('The ids argument should be an array of numbers');}if(typeof n!=='number'||n<0){throw new TypeError('The number of salts should be a positive integer');}if(typeof base!=='number'||base<16||base>36){throw new TypeError('The base should be a number between 16 and 36');} // Create the salts. This will be the same for all hashes\nvar salts=[];for(var i=0;i<n;i++){salts.push(Math.floor(Math.random()*Math.pow(10,6)).toString(base));} // Combine the salts and the actual \nvar hashes=ids.map(function(id){if(typeof id!=='number'){throw new TypeError('The ids you\\'re hashing should only be numbers');}var hash=id.toString(base);var pieces=[].concat(salts,[hash]);var hashString='';do {var index=Math.floor(Math.random()*pieces.length);hashString+=pieces[index];pieces.splice(index,1);}while(pieces.length);return hashString;});return {v:{ids:ids,hashes:hashes,salts:salts,base:base}};}();if((typeof _ret==='undefined'?'undefined':_typeof(_ret))===\"object\")return _ret.v;}catch(e){console.error(e.name,e.message);}}, /**\n   * Takes a string and necessary components to reverse back to the original number\n   * @param  {Array} hashes   list of hashes to reverse\n   * @param  {Array} salts  list of salts applied to the list (provided from `hash`)\n   * @param  {base} base     radix base, 16 through 36 allowed\n   * @return {Array}          list of reversed hashes\n   */revarse:function revarse(hashes,salts){var base=arguments.length<=2||arguments[2]===undefined?this._base:arguments[2];try{var _ret2=function(){if(!hashes.splice){throw new TypeError('The hashes argument should be an array of hashes provided by the hash method');}if(!hashes.splice){throw new TypeError('The salts argument should be an array of salt strings provided by the hash method');}if(typeof base!=='number'||base<16||base>36){throw new TypeError('The base should be a number between 16 and 36');}var re=new RegExp(salts.join('\\|'),'g');var reversed=hashes.map(function(hash){if(typeof hash!=='string'){throw new TypeError('The hashes you\\'re reversing should only be strings');}var stripped=hash.replace(re,'');return parseInt(stripped,base);});return {v:reversed};}();if((typeof _ret2==='undefined'?'undefined':_typeof(_ret2))===\"object\")return _ret2.v;}catch(e){console.error(e.name,e.message);}}};module.exports=harsh;\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}