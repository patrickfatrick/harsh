{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js"],"names":[],"mappings":"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","file":"harsh.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nconst createSalts = (n, base) => {\n  let salts = []\n  for (let i = 0; i < n; i++) {\n    salts.push(Math.floor(Math.random() * Math.pow(10, 6)).toString(base))\n  }\n  return salts\n}\n\nconst createHash = (id, salts, base) => {\n  const hash = id.toString(base)\n  let pieces = [...salts, hash]\n  let hashString = ''\n  do {\n    let index = Math.floor(Math.random() * pieces.length)\n    hashString += pieces[index]\n    pieces.splice(index, 1)\n  } while (pieces.length)\n  return hashString\n}\n\nconst harsh = {\n  /**\n   * Takes a number and a radix base, outputs a salted hash\n   * @param  {Array} ids   list of ids to hash\n   * @param {Number} n number of salts to add to the hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */\n  hash (ids, n, base) {\n    ids = ids || [Math.floor(Math.random() * 100)]\n    n = n || 2\n    base = base || 36\n    try {\n      if (!ids.splice) {\n        throw new TypeError('The ids argument should be an array of numbers')\n      }\n      if (typeof n !== 'number' || n < 0) {\n        throw new TypeError('The number of salts should be a positive integer')\n      }\n      if (typeof base !== 'number' || base < 16 || base > 36) {\n        throw new TypeError('The base should be a number between 16 and 36')\n      }\n\n      // Create the salts. This will be the same for all hashes\n      const salts = createSalts(n, base)\n\n      // Combine the salts and the actual\n      let hashes = ids.map((id) => {\n        if (typeof id !== 'number') {\n          throw new TypeError('The ids you\\'re hashing should only be numbers')\n        }\n        return createHash(id, salts, base)\n      })\n\n      return {\n        ids: ids,\n        hashes: hashes,\n        salts: salts,\n        base: base\n      }\n    } catch (e) {\n      console.error(e.name, e.message)\n    }\n  },\n  /**\n   * Creates a specified number of random tokens\n   * @param  {Number} num  number of tokens to create\n   * @param  {Number} n    number of salts to add to each hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */\n  bunch (num, n, base) {\n    num = num || 1\n    n = n || 2\n    base = base || 36\n    try {\n      if (typeof num !== 'number') {\n        throw new TypeError('The num should be a number')\n      }\n      if (typeof n !== 'number' || n < 0) {\n        throw new TypeError('The number of salts should be a positive integer')\n      }\n      if (typeof base !== 'number' || base < 16 || base > 36) {\n        throw new TypeError('The base should be a number between 16 and 36')\n      }\n\n      // Create the ids\n      let ids = []\n      for (let i = 0; i < num; i++) {\n        ids.push(Math.floor(Math.random() * Math.pow(10, num.toString(10).length + 2)))\n      }\n\n      // Create the salts. This will be the same for all hashes\n      const salts = createSalts(n, base)\n\n      // Combine the salts and the actual\n      let hashes = ids.map((id) => {\n        return createHash(id, salts, base)\n      })\n\n      return {\n        ids: ids,\n        hashes: hashes,\n        salts: salts,\n        base: base\n      }\n    } catch (e) {\n      console.error(e.name, e.message)\n    }\n  },\n  /**\n   * Takes a string and necessary components to reverse back to the original number\n   * @param  {Array} hashes   list of hashes to reverse\n   * @param  {Array} salts  list of salts applied to the list (provided from `hash`)\n   * @param  {base} base     radix base, 16 through 36 allowed\n   * @return {Array}          list of reversed hashes\n   */\n  reverse (hashes, salts, base) {\n    base = base || 36\n    try {\n      if (!hashes.splice) {\n        throw new TypeError('The hashes argument should be an array of hashes provided by the hash method')\n      }\n      if (!salts.splice) {\n        throw new TypeError('The salts argument should be an array of salt strings provided by the hash method')\n      }\n      if (typeof base !== 'number' || base < 16 || base > 36) {\n        throw new TypeError('The base should be a number between 16 and 36')\n      }\n      const re = new RegExp(salts.join('\\|'), 'g')\n\n      let reversed = hashes.map((hash) => {\n        if (typeof hash !== 'string') {\n          throw new TypeError('The hashes you\\'re reversing should only be strings')\n        }\n        let stripped = hash.replace(re, '')\n        return parseInt(stripped, base)\n      })\n      return reversed\n    } catch (e) {\n      console.error(e.name, e.message)\n    }\n  }\n}\n\nmodule.exports = harsh\n"]}