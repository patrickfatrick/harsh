{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js"],"names":[],"mappings":"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","file":"harsh.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nconst createSalts = (n, base) => {\n  let salts = []\n  for (let i = 0; i < n; i++) {\n    salts.push(Math.floor(Math.random() * Math.pow(10, 6)).toString(base))\n  }\n  return salts\n}\n\nconst createHash = (id, salts, base) => {\n  const hash = id.toString(base)\n  let pieces = [...salts, hash]\n  let hashString = ''\n  do {\n    let index = Math.floor(Math.random() * pieces.length)\n    hashString += pieces[index]\n    pieces.splice(index, 1)\n  } while (pieces.length)\n  return hashString\n}\n\nmodule.exports = {\n  /**\n   * Takes a number and a radix base, outputs a salted hash\n   * @param  {Array} ids   list of ids to hash\n   * @param {Number} n number of salts to add to the hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */\n  hash (ids, n, base) {\n    ids = ids || [Math.floor(Math.random() * 100)]\n    n = n || 2\n    base = base || 36\n\n    if (!ids.splice) {\n      throw new TypeError('The ids argument should be an array of numbers')\n    }\n    if (typeof n !== 'number' || n < 0) {\n      throw new TypeError('The number of salts should be a positive integer')\n    }\n    if (typeof base !== 'number' || base < 16 || base > 36) {\n      throw new TypeError('The base should be a number between 16 and 36')\n    }\n\n    // Create the salts. This will be the same for all hashes\n    const salts = createSalts(n, base)\n\n    // Combine the salts and the actual\n    let hashes = ids.map((id) => {\n      if (typeof id !== 'number') {\n        throw new TypeError('The ids you\\'re hashing should only be numbers')\n      }\n      return createHash(id, salts, base)\n    })\n\n    return {\n      ids: ids,\n      hashes: hashes,\n      salts: salts,\n      base: base\n    }\n  },\n  /**\n   * Simplified API to just return a single token using defaults\n   * @return {String} a hash\n   */\n  hashish () {\n    return createHash(\n      [Math.floor(Math.random() * 100)],\n      createSalts(2, 36),\n      36\n    )\n  },\n  /**\n   * Creates a specified number of random tokens\n   * @param  {Number} num  number of tokens to create\n   * @param  {Number} n    number of salts to add to each hash\n   * @param  {Number} base radix base, 16 through 36 allowed\n   * @return {Object}      a hash object containing the hashes as well as info needed to reverse them\n   */\n  bunch (num, n, base) {\n    num = num || 1\n    n = n || 2\n    base = base || 36\n\n    if (typeof num !== 'number') {\n      throw new TypeError('The num should be a number')\n    }\n    if (typeof n !== 'number' || n < 0) {\n      throw new TypeError('The number of salts should be a positive integer')\n    }\n    if (typeof base !== 'number' || base < 16 || base > 36) {\n      throw new TypeError('The base should be a number between 16 and 36')\n    }\n\n    // Create the ids\n    let ids = []\n    for (let i = 0; i < num; i++) {\n      ids.push(Math.floor(Math.random() * Math.pow(10, num.toString(10).length + 2)))\n    }\n\n    // Create the salts. This will be the same for all hashes\n    const salts = createSalts(n, base)\n\n    // Combine the salts and the actual\n    let hashes = ids.map((id) => {\n      return createHash(id, salts, base)\n    })\n\n    return {\n      ids: ids,\n      hashes: hashes,\n      salts: salts,\n      base: base\n    }\n  },\n  /**\n   * Takes a string and necessary components to reverse back to the original number\n   * @param  {Array} hashes   list of hashes to reverse\n   * @param  {Array} salts  list of salts applied to the list (provided from `hash`)\n   * @param  {base} base     radix base, 16 through 36 allowed\n   * @return {Array}          list of reversed hashes\n   */\n  reverse (hashes, salts, base) {\n    base = base || 36\n\n    if (!hashes.splice) {\n      throw new TypeError('The hashes argument should be an array of hashes provided by the hash method')\n    }\n    if (!salts.splice) {\n      throw new TypeError('The salts argument should be an array of salt strings provided by the hash method')\n    }\n    if (typeof base !== 'number' || base < 16 || base > 36) {\n      throw new TypeError('The base should be a number between 16 and 36')\n    }\n    const re = new RegExp(salts.join('|'), 'g')\n\n    let reversed = hashes.map((hash) => {\n      if (typeof hash !== 'string') {\n        throw new TypeError('The hashes you\\'re reversing should only be strings')\n      }\n      let stripped = hash.replace(re, '')\n      return parseInt(stripped, base)\n    })\n\n    return reversed\n  }\n}\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}